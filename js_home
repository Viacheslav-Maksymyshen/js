// function getExtremeElements(array) {
//   // Change code below this line

//   const lastElement = array[array.length - 1];
//   const FirstElement = array[0];
//   array = [FirstElement, lastElement];
//   console.log(array);

//   // Change code above this line
// }
// getExtremeElements([1, 2, 3, 4, 5]);
// getExtremeElements(["Earth", "Mars", "Venus"]);
// getExtremeElements(["apple", "peach", "pear", "banana"]);

// function splitMessage(message, delimeter) {
//   let words;
//   // Change code below this line
//   words = message.split(delimeter);
//   // Change code above this line
//   console.log(words);
// }
// splitMessage('Mango hurries to the train', ' '); //["Mango", "hurries", "to", "the", "train"]
// splitMessage('Mango', ''); //["M", "a", "n", "g", "o"]
// splitMessage('best_for_week', '_'); // ["best", "for", "week"]

// function calculateEngravingPrice(message, pricePerWord) {
//   // Change code below this line
//   let splitWord = message.split(' ');
//   let calcWord = splitWord.length * pricePerWord;
//   return calcWord;

//   // Change code above this line
// }

// calculateEngravingPrice('JavaScript is in my blood', 10); //50
// calculateEngravingPrice('JavaScript is in my blood', 20); //100
// calculateEngravingPrice('Web-development is creative work', 40); //160
// calculateEngravingPrice('Web-development is creative work', 20); //80
//=================================================================================================
// function calculateTotal(number) {
//   // Change code below this line
//   let sum = 0;
//   for (let i = 0; i <= number; i += 1) {
//     sum += i;
//   }
//   return sum;
//   // Change code above this line
// }
//==============================================================================================

// function calculateTotalPrice(order) {
//   let total = 0;

//   // Change code below this line
//   for (let i = 0; i < order.length; i += 1) {
//     total += order[i];
//   }
//   // Change code above this line
//   console.log(total);
// }
// calculateTotalPrice([12, 85, 37, 4]); // 138
// calculateTotalPrice([164, 48, 291]); // 503
// calculateTotalPrice([412, 371, 94, 63, 176]); // 1116

//=============================================================================================================
// function findLongestWord(string) {
//   let splitWord = string.split(' ');
//   let longestWord = splitWord[0];
//   for (let i = 0; i < splitWord.length; i += 1) {
//     if (splitWord[i].length > longestWord.length) {
//       longestWord = splitWord[i];
//     }
//   }
//   return longestWord;
// }
// findLongestWord('The quick brown fox jumped ghghggghghgh over the lazy dog'); // jumped
// findLongestWord('Google do a roll'); // Google
// findLongestWord('May the force be with you'); // force

//============================================================================================
// function createArrayOfNumbers(min, max) {
//   const numbers = [];
//   // Change code below this line
//   for (let i = min; i <= max; i += 1) {
//     numbers.push(i);
//   }
//   // Change code above this line

//   return numbers;
// }
// createArrayOfNumbers(1, 3); // [1, 2, 3]
// createArrayOfNumbers(14, 17); // [14, 15, 16, 17]
// createArrayOfNumbers(29, 34); // [29, 30, 31, 32, 33, 34]
//=============================================================================================
// function filterArray(numbers, value) {
//   // Change code below this line
//   let newArray = [];

//   for (let i = 0; i < numbers.length; i += 1) {
//     console.log(numbers[i]);
//     // if (numbers[i] > value) {
//     //   newArray.push(numbers[i]);
//     // }
//   }
//   console.log(newArray);
//   return newArray;
//   // Change code above this line
// }
// filterArray([1, 2, 3, 4, 5], 3); // [4, 5]
// filterArray([1, 2, 3, 4, 5], 4); // [5]
// filterArray([1, 2, 3, 4, 5], 5); // []
// filterArray([12, 24, 8, 41, 76], 38); // [41, 76]
// filterArray([12, 24, 8, 41, 76], 20); // [24, 41, 76]
//==============================================================================================
// function getCommonElements(array1, array2) {
//   // Change code below this line
//   let coincidence = [];
//   for (const array of array1) {
//     if (array2.includes(array)) {
//       coincidence.push(array);
//     }
//   }
//   return coincidence;
//   // Change code above this line
// }
// getCommonElements([1, 2, 3], [2, 4]); // [2]
// getCommonElements([1, 2, 3], [2, 1, 17, 19]); // [1, 2]
// getCommonElements([24, 12, 27, 3], [12, 8, 3, 36, 27]); // [12, 27, 3]
// getCommonElements([10, 20, 30, 40], [4, 30, 17, 10, 40]); // [10, 30, 40]
// getCommonElements([1, 2, 3], [10, 20, 30]); //[]
//================================================================================================
// function getEvenNumbers(start, end) {
//   // Change code below this line
//   let pair = [];
//   for (let i = start; i <= end; i += 1) {
//     arr = i;
//     if (arr % 2 === 0) {
//       pair.push(arr);
//     }
//   }
//   console.log(pair);
//   return pair;
//   // Change code above this line
// }
// getEvenNumbers(2, 5); // [2, 4]
// // getEvenNumbers(3, 11); // [4, 6, 8, 10]
// // getEvenNumbers(6, 12); // [6, 8, 10, 12]
// // getEvenNumbers(8, 8); // [8]
// // getEvenNumbers(7, 7); // []
//========================================================================================================
// function includes(array, value) {
//   // Change code below this line

//   for (const arr of array) {
//     if (arr === value) {
//       return true;
//     }
//   }
//   return false;
// }
// includes([1, 2, 3, 4, 5], 3); // true
// // includes([1, 2, 3, 4, 5], 17); // false
// // includes(['Earth', 'Mars', 'Venus', 'Jupiter', 'Saturn'], 'Jupiter'); // true
// // includes(['Earth', 'Mars', 'Venus', 'Jupiter', 'Saturn'], 'Uranus'); // false
// // includes(['apple', 'plum', 'pear', 'orange'], 'plum'); // true
// includes(['apple', 'plum', 'pear', 'orange'], 'kiwi'); // false
//===========================================================================================================
// const apartment = {
//   imgUrl: 'https://via.placeholder.com/640x480',
//   descr: 'Spacious apartment in the city center',
//   rating: 4.7,
//   price: 5000,
//   tags: ['premium', 'promoted', 'top', 'trusted'],
//   owner: {
//     name: 'Henry Sibola',
//     phone: '982-126-1588',
//     email: 'henry.carter@aptmail.com',
//   },
// };

// // Change code below this line
// apartment.area = 60;
// apartment.rooms = 3;
// apartment.location = {};
// apartment.location.country = 'Jamaica';
// apartment.location.city = 'Kingston';
//==================================================================================================================
// function multiply(firstNumber, secondNumber, ...otherArgs) {
//   //console.log(firstNumber); // Значення першого аргументу
//   //console.log(secondNumber); // Значення другого аргументу
//   //console.log(otherArgs); // Масив інших аргументів
// }

// multiply(1, 2);
// multiply(1, 2, 3);
// multiply(1, 2, 3, 4);
//=====================================================================================================================
// const books = [
//   {
//     title: 'The Last Kingdom',
//     author: 'Bernard Cornwell',
//     rating: 8.38,
//   },
//   {
//     title: 'На березі спокійних вод',
//     author: 'Роберт Шеклі',
//     rating: 8.51,
//   },
// ];
// for (const { title, author, rating } of books) {
//   console.log(title);
//   console.log(author);
//   console.log(rating);
// }
//=================================================================================================
// function makeTask(data) {
//   // Change code below this line

//   const { text, category = 'General', priority = 'Normal', completed = false } = data;
//   return (vasya = {
//     text,
//     category,
//     priority,
//     completed,
//   });

//   // Change code above this line
// }

// console.log(makeTask({ category: 'Homemade', priority: 'Low', text: 'Take out the trash' })); // { category: "Homemade", priority: "Low", text: "Take out the trash", completed: false }
//=====================================================================================================
// function compare(firstNumber = 0, secondNumber = 0, operation = '+', result = 0) {
//   const num1 = Number(firstNumber);
//   const num2 = Number(secondNumber);
//   const res = Number(result);

//   const operationsDic = {
//     '+': function (a, b) {
//       return a + b;
//     },
//     '-': function (a, b) {
//       return a - b;
//     },
//     '*': function (a, b) {
//       return a * b;
//     },
//     '/': function (a, b) {
//       return a / b;
//     },
//   };

//   if (operation in operationsDic === false) return 'Error';
//   if (isNaN(num1) || isNaN(num2) || isNaN(res)) return 'Error';

//   const operationResult = operationsDic[operation](num1, num2);

//   return operationResult === res;
//   // 4 === 4
// }

// const res = compare('2', '2', '*', '4');
// console.log(res);
//==========================================================================================
// Change code below this line
// function add(...args) {
//   let sum = 0;
//   for (const arg of args) {
//     sum += arg;
//   }

//   return sum;
//   // Change code above this line
// }
// add(74, 11, 62, 46, 12, 36); //241
// add(32, 6, 13, 19, 8); //78
//===========================================================================================
// Change code below this line
// function findMatches(args1, ...args2) {
//   // console.log(args1);
//   // console.log(args2);
//   const matches = []; // Don't change this line
//   for (const arg1 of args1) {
//     if (args2.includes(arg1)) {
//       matches.push(arg1);
//     }
//   }

//   // Change code above this line
//   console.log(matches);
//   return matches;
// }

// findMatches([1, 2, 3, 4, 5], 1, 8, 2, 7); // [1, 2]
// findMatches([4, 89, 17, 36, 2], 8, 17, 89, 27, 2); // [17, 89, 2]
// findMatches([10, 24, 41, 6, 9, 19], 24, 11, 9, 23, 41); // [24, 9, 41]
// findMatches([63, 11, 8, 29], 4, 7, 16); // []
//================================================================================================
// const bookShelf = {
//   books: ['The last kingdom', 'Haze', 'The guardian of dreams'],
//   updateBook(oldName, newName) {
//     // Change code below this line
//     const bookIndex = this.books.indexOf(oldName);
//     this.books.splice(bookIndex, 1, newName);

//     // Change code above this line
//   },
// };

// bookShelf.updateBook('Haze', 'Dungeon chronicles');
// console.log(bookShelf.books);
//================================================================================================
// const atTheOldToad = {
//   potions: ['Speed potion', 'Dragon breath', 'Stone skin'],
//   addPotion(potionName) {
//     // Change code below this line

//     this.potions.push(potionName);

//     // Change code above this line
//   },
// };
//=================================================================================================
// const pizzaPalace = {
//   pizzas: ['Ultracheese', 'Smoked', 'Four meats'],
//   order(pizzaName, onSuccess, onError) {
//     for (const pizza of this.pizzas) {
//       if (pizza === pizzaName) {
//         return onSuccess(pizzaName);
//       }
//     }
//     return onError(pizzaName);
//   },
// };
// // Change code above this line

// // Callback for onSuccess
// function makePizza(pizzaName) {
//   return `Your order is accepted. Cooking pizza ${pizzaName}.`;
// }

// // Callback for onError
// function onOrderError(error) {
//   return `Error! There is no pizza with a name ${error} in the assortment.`;
// }

// // Method calls with callbacks
// pizzaPalace.order('Smoked', makePizza, onOrderError);
// pizzaPalace.order('Four meats', makePizza, onOrderError);
// pizzaPalace.order('Big Mike', makePizza, onOrderError);
// pizzaPalace.order('Vienna', makePizza, onOrderError);
//==================================================================================================
// function calculateTotalPrice(orderedItems) {
//   let totalPrice = 0;
//   // Change code below this line
//   orderedItems.forEach(function (Items) {
//     totalPrice += Items;
//   });

//   // for (let i = 0; i < orderedItems.length; i += 1) {
//   //   totalPrice += orderedItems[i];
//   //}

//   // Change code above this line
//   console.log(totalPrice);
//   return totalPrice;
// }
// calculateTotalPrice([164, 48, 291]); // 503
//==========================================================================================================
// function filterArray(numbers, value) {
//   const filteredNumbers = [];
//   // Change code below this line

//   numbers.forEach(function (items) {
//     if (items > value) {
//       filteredNumbers.push(items);
//     }
//   });

//   // Change code above this line
//   return filteredNumbers;
// }

// filterArray([1, 2, 3, 4, 5], 3);
//===========================================================================================================
// function getCommonElements(firstArray, secondArray) {
//   const commonElements = [];
//   // Change code below this line

//   firstArray.forEach(function (items) {
//     if (secondArray.includes(items)) {
//       commonElements.push(items);
//     }
//   });

//   return commonElements;
//   // Change code above this line
// }
//===========================================================================================================
// const students = [
//   { name: 'Манго', courses: ['математика', 'фізика'] },
//   { name: 'Полі', courses: ['інформатика', 'математика'] },
//   { name: 'Ківі', courses: ['фізика', 'біологія'] },
// ];

// const allCourses = students.flatMap(student => student.courses);
// const uniqueCourses = allCourses.filter((course, index, array) => {
//   return array.indexOf(course) === index;
// });
// console.table(uniqueCourses);
//=========================================================================================================
// const users = [
//   {
//     name: 'Moore Hensley',
//     email: 'moorehensley@indexia.com',
//     eyeColor: 'blue',
//     friends: ['Sharron Pace'],
//     isActive: false,
//     balance: 2811,
//     skills: ['ipsum', 'lorem'],
//     gender: 'male',
//     age: 37,
//   },
//   {
//     name: 'Sharlene Bush',
//     email: 'sharlenebush@tubesys.com',
//     eyeColor: 'blue',
//     friends: ['Briana Decker', 'Sharron Pace'],
//     isActive: true,
//     balance: 3821,
//     skills: ['tempor', 'mollit', 'commodo', 'veniam', 'laborum'],
//     gender: 'female',
//     age: 34,
//   },
//   {
//     name: 'Ross Vazquez',
//     email: 'rossvazquez@xinware.com',
//     eyeColor: 'green',
//     friends: ['Marilyn Mcintosh', 'Padilla Garrison', 'Naomi Buckner'],
//     isActive: false,
//     balance: 3793,
//     skills: ['nulla', 'anim', 'proident', 'ipsum', 'elit'],
//     gender: 'male',
//     age: 24,
//   },
//   {
//     name: 'Elma Head',
//     email: 'elmahead@omatom.com',
//     eyeColor: 'green',
//     friends: ['Goldie Gentry', 'Aisha Tran'],
//     isActive: true,
//     balance: 2278,
//     skills: ['adipisicing', 'irure', 'velit'],
//     gender: 'female',
//     age: 21,
//   },
//   {
//     name: 'Carey Barr',
//     email: 'careybarr@nurali.com',
//     eyeColor: 'blue',
//     friends: ['Jordan Sampson', 'Eddie Strong'],
//     isActive: true,
//     balance: 3951,
//     skills: ['ex', 'culpa', 'nostrud'],
//     gender: 'male',
//     age: 27,
//   },
//   {
//     name: 'Blackburn Dotson',
//     email: 'blackburndotson@furnigeer.com',
//     eyeColor: 'brown',
//     friends: ['Jacklyn Lucas', 'Linda Chapman'],
//     isActive: false,
//     balance: 1498,
//     skills: ['non', 'amet', 'ipsum'],
//     gender: 'male',
//     age: 38,
//   },
//   {
//     name: 'Sheree Anthony',
//     email: 'shereeanthony@kog.com',
//     eyeColor: 'brown',
//     friends: ['Goldie Gentry', 'Briana Decker'],
//     isActive: true,
//     balance: 2764,
//     skills: ['lorem', 'veniam', 'culpa'],
//     gender: 'female',
//     age: 39,
//   },
// ];
// //const getUserNames = users.map(({ name }) => name);
// const getUserName = users => users.map(({ name }) => name);
// console.log(getUserName(users));
//========================================================================================================
// const numbers = [17, 24, 82, 61, 36, 18, 47, 52, 73];
// // Change code below this line

// const evenNumbers = numbers.filter(number => number % 2 === 0);
// const oddNumbers = numbers.filter(number => number % 2 !== 0);
//=========================================================================================================
// const books = [
//   {
//     title: 'The Last Kingdom',
//     author: 'Bernard Cornwell',
//     genres: ['adventure', 'history'],
//   },
//   {
//     title: 'Beside Still Waters',
//     author: 'Robert Sheckley',
//     genres: ['fiction', 'mysticism'],
//   },
//   {
//     title: 'Redder Than Blood',
//     author: 'Tanith Lee',
//     genres: ['horror', 'mysticism', 'adventure'],
//   },
// ];
// // Change code below this line
// const allGenres = books.flatMap(({ genres }) => genres);
// const uniqueGenres = allGenres.filter((genre, index, arr) => arr.indexOf(genre) === index);
//==============================================================================================================
// const releaseDates = [2016, 1967, 2008, 1984, 1973, 2012, 1997];
// const authors = ['Tanith Lee', 'Bernard Cornwell', 'Robert Sheckley', 'Fyodor Dostoevsky'];
// // Change code below this line

// const ascendingReleaseDates = [...releaseDates].sort();
// console.log(ascendingReleaseDates);

// const alphabeticalAuthors = [...authors].sort();
// console.log(alphabeticalAuthors);
//================================================================================================================
// const books = [
//   {
//     title: 'The Last Kingdom',
//     author: 'Bernard Cornwell',
//     rating: 8.38,
//   },
//   {
//     title: 'Beside Still Waters',
//     author: 'Robert Sheckley',
//     rating: 8.51,
//   },
//   {
//     title: 'The Dream of a Ridiculous Man',
//     author: 'Fyodor Dostoevsky',
//     rating: 7.75,
//   },
//   { title: 'Redder Than Blood', author: 'Tanith Lee', rating: 7.94 },
//   { title: 'Enemy of God', author: 'Bernard Cornwell', rating: 8.67 },
// ];
// // Change code below this line

// const sortedByAuthorName = books.sort((a, b) => a.author.localeCompare(b));

// const sortedByReversedAuthorName = books.sort((a, b) => b.author.localeCompare(a));

// const sortedByAscendingRating = books.sort((a, b) => a.rating - b.rating);

// const sortedByDescentingRating = books.sort((a, b) => b.rating - a.rating);
// console.log(sortedByDescentingRating);
//============================================================================================================
// const MIN_BOOK_RATING = 8;
// const names = books
//   .filter(({ rating }) => rating > MIN_BOOK_RATING)
//   .map(({ author }) => author)
//   .sort((a, b) => a.localeCompare(b));
//============================================================================================================
// const users = [
//   {
//     name: 'Moore Hensley',
//     email: 'moorehensley@indexia.com',
//     eyeColor: 'blue',
//     friends: ['Sharron Pace'],
//     isActive: false,
//     balance: 2811,
//     gender: 'male',
//   },
//   {
//     name: 'Sharlene Bush',
//     email: 'sharlenebush@tubesys.com',
//     eyeColor: 'blue',
//     friends: ['Briana Decker', 'Sharron Pace'],
//     isActive: true,
//     balance: 3821,
//     gender: 'female',
//   },
//   {
//     name: 'Ross Vazquez',
//     email: 'rossvazquez@xinware.com',
//     eyeColor: 'green',
//     friends: ['Marilyn Mcintosh', 'Padilla Garrison', 'Naomi Buckner'],
//     isActive: false,
//     balance: 3793,
//     gender: 'male',
//   },
//   {
//     name: 'Elma Head',
//     email: 'elmahead@omatom.com',
//     eyeColor: 'green',
//     friends: ['Goldie Gentry', 'Aisha Tran'],
//     isActive: true,
//     balance: 2278,
//     gender: 'female',
//   },
//   {
//     name: 'Carey Barr',
//     email: 'careybarr@nurali.com',
//     eyeColor: 'blue',
//     friends: ['Jordan Sampson', 'Eddie Strong', 'Adrian Cross'],
//     isActive: true,
//     balance: 3951,
//     gender: 'male',
//   },
//   {
//     name: 'Blackburn Dotson',
//     email: 'blackburndotson@furnigeer.com',
//     eyeColor: 'brown',
//     friends: ['Jacklyn Lucas', 'Linda Chapman', 'Adrian Cross', 'Solomon Fokes'],
//     isActive: false,
//     balance: 1498,
//     gender: 'male',
//   },
//   {
//     name: 'Sheree Anthony',
//     email: 'shereeanthony@kog.com',
//     eyeColor: 'brown',
//     friends: ['Goldie Gentry', 'Briana Decker'],
//     isActive: true,
//     balance: 2764,
//     gender: 'female',
//   },
// ];
// const getNamesSortedByFriendCount = [...users]
//   .sort((a, b) => a.friends.length - b.friends.length)
//   .map(user => user.friends);
// console.log(getNamesSortedByFriendCount);
// const getNamesSortedByFriendCount = users
//   .flatMap(user => user.friends)
//   .filter((friend, i, arr) => arr.indexOf(friend) === i)
//   .sort((a, b) => a.localeCompare(b));

// console.log(getNamesSortedByFriendCount);
// const gender = 'male';
// const getNamesSortedByFriendCount = users

//   .filter(user => user.gender === gender)
//   .reduce((total, user) => total + user.balance, 0);

// console.log(getNamesSortedByFriendCount);
//==============================================================================================================
// class Storage {
//   constructor(items) {
//     this.items = items;
//   }
//   getItems() {
//     return this.items;
//   }
//   addItem(newItems) {
//     this.items.push(newItems);
//   }
//   removeItem(itemToRemove) {
//     let i = this.items.indexOf(itemToRemove);
//     if (i !== -1) {
//       this.items.splice(i, 1);
//     }
//     console.log(`Відсутній елемент масива ${itemToRemove}`);
//   }
// }
// const storage = new Storage(['Nanitoids', 'Prolonger', 'Antigravitator']);
// console.log(storage.getItems()); // ["Nanitoids", "Prolonger", "Antigravitator"]
// storage.addItem('Droid');
// console.log(storage.getItems()); // ["Nanitoids", "Prolonger", "Antigravitator", "Droid"]
// storage.removeItem('Prolonger');
// console.log(storage.getItems()); // ["Nanitoids", "Antigravitator", "Droid"]
//============================================================================================

// class StringBuilder {
//   constructor(initialValue) {
//     this.value = initialValue;
//   }
//   getValue() {
//     return this.value;
//   }
//   padStart(str) {
//     this.value = str + this.value;
//   }
//   padEnd(str) {
//     this.value += str;
//   }
//   padBoth(str) {
//     this.value = str + this.value + str;
//   }
// }

// // Change code above this line
// const builder = new StringBuilder('.');
// console.log(builder.getValue()); // "."
// builder.padStart('^');
// console.log(builder.getValue()); // "^."
// builder.padEnd('^');
// console.log(builder.getValue()); // "^.^"
// builder.padBoth('=');
// console.log(builder.getValue()); // "=^.^="
//==================================================================================================
// class Car {
//   // Change code below this line
//   static MAX_PRICE = 50000;
//   #price;

//   constructor({ price }) {
//     this.#price = price;
//   }

//   get price() {
//     return this.#price;
//   }

//   set price(newPrice) {
//     if (newPrice <= Car.MAX_PRICE) {
//       this.#price = newPrice;
//     }
//   }
//   // Change code above this line
// }

// const audi = new Car({ price: 35000 });
// console.log(audi.price); // 35000

// audi.price = 49000;
// console.log(audi.price); // 49000

// audi.price = 51000;
// console.log(audi.price); // 49000
//================================================================================================
// class Car {
//   static #MAX_PRICE = 50000;
//   // Change code below this line
//   static checkPrice(price) {
//     return price >= Car.#MAX_PRICE
//       ? 'Error! Price exceeds the maximum'
//       : 'Success! Price is within acceptable limits';
//   }
//   // Change code above this line
//   constructor({ price }) {
//     this.price = price;
//   }
// }

// const audi = new Car({ price: 36000 });
// const bmw = new Car({ price: 64000 });

// console.log(Car.checkPrice(audi.price)); // "Success! Price is within acceptable limits"

// console.log(Car.checkPrice(bmw.price)); // "Error! Price exceeds the maximum"
//===============================================================================================
// class User {
//   email;

//   constructor(email) {
//     this.email = email;
//   }

//   get email() {
//     return this.email;
//   }

//   set email(newEmail) {
//     this.email = newEmail;
//   }
// }

// class Admin extends User {
//   // Change code below this line

//   static AccessLevel = {
//     BASIC: 'basic',
//     SUPERUSER: 'superuser',
//   };

//   constructor({ email, accessLevel }) {
//     super(email);
//     this.accessLevel = accessLevel;
//   }

//   // Change code above this line
// }

// const mango = new Admin({
//   email: 'mango@mail.com',
//   accessLevel: Admin.AccessLevel.SUPERUSER,
// });

// console.log(mango.email); // "mango@mail.com"
// console.log(mango.accessLevel); // "superuser"
//=========================================================================================================
class User {
  email;

  constructor(email) {
    this.email = email;
  }

  get email() {
    return this.email;
  }

  set email(newEmail) {
    this.email = newEmail;
  }
}
class Admin extends User {
  // Change code below this line

  static AccessLevel = {
    BASIC: 'basic',
    SUPERUSER: 'superuser',
  };

  blacklistedEmails = [];

  constructor({ email, accessLevel }) {
    super(email);
    this.accessLevel = accessLevel;
  }

  blacklist(email) {
    this.blacklistedEmails.push(email);
  }
  isBlacklisted(email) {
    for (const emails of this.blacklistedEmails) {
      if (emails === email) {
        return true;
      } else {
        return false;
      }
    }
  }

  // Change code above this line
}

const mango = new Admin({
  email: 'mango@mail.com',
  accessLevel: Admin.AccessLevel.SUPERUSER,
});

console.log(mango.email); // "mango@mail.com"
console.log(mango.accessLevel); // "superuser"

mango.blacklist('poly@mail.com');
console.log(mango.blacklistedEmails); // ["poly@mail.com"]
console.log(mango.isBlacklisted('mango@mail.com')); // false
console.log(mango.isBlacklisted('poly@mail.com')); // true
